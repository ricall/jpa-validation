plugins {
	id 'org.springframework.boot' version '2.4.2'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id 'jacoco'
	id 'checkstyle'
}

ext {
	jacocoExclusions = [
			'io/ricall/jpa/demo/jpavalidation/JpaValidationApplication.class',
			'io/ricall/jpa/demo/jpavalidation/entity/**',
			'io/ricall/jpa/demo/jpavalidation/model/**'
	];
}

group = 'io.ricall.jpa.demo'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	annotationProcessor 'org.projectlombok:lombok'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

	compileOnly 'org.projectlombok:lombok'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-cache'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
	implementation 'org.flywaydb:flyway-core'
	runtimeOnly 'com.h2database:h2'

	testAnnotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.projectlombok:lombok'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
}

test {
	useJUnitPlatform()
}

checkstyle {
	configProperties += [
			cacheFile: file('build/checkstyleCache'),
			suppressFile: file('config/checkstyle/supressions.xml'),
			headerFile: file('config/checkstyle/javaHeader.txt'),
	]
	checkstyleTest.configFile = file("$projectDir/config/checkstyle/checkstyle-test.xml")
}

jacocoTestReport {
	finalizedBy jacocoTestCoverageVerification
	reports {
		html.destination file("$reportsDir/coverage")
	}
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: jacocoExclusions)
		}))
	}
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			limit {
				counter = 'LINE'
				minimum = 0.2
			}
			limit {
				counter = 'BRANCH'
				minimum = 0.2
			}
		}
	}
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: jacocoExclusions)
		}))
	}
}
check.dependsOn jacocoTestReport
